{"version":3,"sources":["components/landingPage.jsx","components/teams.jsx","App.js","serviceWorker.js","index.js"],"names":["LandingPage","socket","updateJoined","input","useRef","id","ref","placeholder","onClick","event","alias","current","value","team","Math","random","emit","Teams","useState","blueTeam","updateBlueTeam","redTeam","updateRedTeam","useEffect","on","users","filter","x","class","map","user","openSocket","App","joined","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAsBeA,EApBK,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aAEpBC,EAAQC,iBAAO,MAQrB,OACI,yBAAKC,GAAG,qBACJ,yBAAKA,GAAG,uBACJ,2BAAOC,IAAKH,EAAOI,YAAY,oBAC/B,4BAAQC,QAXH,SAACC,GACd,IAAMC,EAAQP,EAAMQ,QAAQC,MACtBC,EAAQC,KAAKC,SAAW,GAAO,OAAS,MAC9Cd,EAAOe,KAAK,OAAO,CAACN,QAAOG,SAC3BX,GAAa,KAOL,iBCuBDe,EArCD,SAAC,GAAc,IAAbhB,EAAY,EAAZA,OAAY,EAEWiB,mBAAS,IAFpB,mBAEjBC,EAFiB,KAEPC,EAFO,OAGSF,mBAAS,IAHlB,mBAGjBG,EAHiB,KAGRC,EAHQ,KAexB,OAVAC,qBAAU,WACNtB,EAAOe,KAAK,aACZf,EAAOuB,GAAG,aAAY,SAACC,GACnB,IAAMN,EAAWM,EAAMC,QAAO,SAAAC,GAAC,MAAW,SAATA,EAAEd,QAC7BQ,EAAUI,EAAMC,QAAO,SAAAC,GAAC,MAAW,QAATA,EAAEd,QAClCO,EAAeD,GACfG,EAAcD,QAEpB,IAGE,yBAAKO,MAAM,uBACP,yBAAKA,MAAM,mBAAX,YAGQT,EAASU,KAAI,SAACC,GAAD,OACT,2BAAIA,EAAKpB,WAIrB,yBAAKkB,MAAM,kBAAX,WAGQP,EAAQQ,KAAI,SAACC,GAAD,OACR,2BAAIA,EAAKpB,aC1B3BT,E,MAAS8B,GAAW,8BAcXC,MAZf,WAAgB,IAAD,EAEkBd,oBAAS,GAF3B,mBAENe,EAFM,KAEE/B,EAFF,KAIb,OACE,yBAAKgC,UAAU,QACXD,GAAU,kBAAC,EAAD,CAAahC,OAAQA,EAAQC,aAAcA,IACtD+B,GAAU,kBAAC,EAAD,CAAOhC,OAAQA,MCFZkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45aa638b.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\nconst LandingPage = ({socket, updateJoined}) => {\n\n    const input = useRef(null);\n    const joinGame = (event) => {\n        const alias = input.current.value;\n        const team = (Math.random() > 0.5) ? 'blue' : 'red';\n        socket.emit('join',{alias, team});\n        updateJoined(true);\n    }\n\n    return (\n        <div id=\"lp-base-container\">\n            <div id=\"lp-fields-container\">\n                <input ref={input} placeholder=\"Enter your name\"></input>\n                <button onClick={joinGame}>Let's Play</button>\n            </div>\n        </div>\n        )\n}\n\nexport default LandingPage;","import React, {useEffect, useState} from 'react';\n\nconst Teams = ({socket}) => {\n\n    const [blueTeam, updateBlueTeam] = useState([]);\n    const [redTeam, updateRedTeam] = useState([]);\n\n    useEffect(()=>{\n        socket.emit('get-users');\n        socket.on('all-users',(users)=>{\n            const blueTeam = users.filter(x=>x.team==='blue');\n            const redTeam = users.filter(x=>x.team==='red');\n            updateBlueTeam(blueTeam);\n            updateRedTeam(redTeam);\n        });\n    },[])\n\n    return (\n        <div class=\"full-vh d-flex p-40\">\n            <div class=\"color-blue w-50\">\n                Blue Team\n                {\n                    blueTeam.map((user) => (\n                        <p>{user.alias}</p>\n                    ))\n                }\n            </div>\n            <div class=\"color-red w-50\">\n                Red Team\n                {\n                    redTeam.map((user) => (\n                        <p>{user.alias}</p>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Teams;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport openSocket from 'socket.io-client';\nimport LandingPage from './components/landingPage';\nimport Teams from './components/teams';\nconst socket = openSocket('http://192.168.43.124:8080');\n\nfunction App() {\n\n  const [joined, updateJoined] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {!joined && <LandingPage socket={socket} updateJoined={updateJoined}></LandingPage>}\n      {joined && <Teams socket={socket}></Teams>}\n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}